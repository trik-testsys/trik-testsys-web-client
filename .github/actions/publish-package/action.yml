name: Publish package
description: Publishes package to GitHub Package Registry and Docker Hub
branding:
  icon: package
  color: blue

inputs:
  registry:
    description: 'The Docker registry'
    default: ghcr.io
    required: true
  github-token:
    description: 'GitHub token'
    required: true
  image-name:
    description: 'The name of the Docker image'
    default: ${{ github.repository }}
    required: false
  release-branch:
    description: 'The release branch'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout release branch
      shell: bash
      run: git checkout ${{ inputs.release-branch }}

    #    - name: Install cosign
    #      uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
    #      with:
    #        cosign-release: 'v2.2.4'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into registry ${{ inputs.registry }}
      uses: docker/login-action@v3.0.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Generate tags
      shell: bash
      run: |
        LAST_TAG=$(git tag -l 'v*' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
        if [[ "${{ github.event.release.tag_name }}" == "$LAST_TAG" ]]; then
            LATEST_TAG="latest"
        else
            LAST_TAG="${{ env.VERSION }}"
        fi
        
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

    #    - name: Extract Docker metadata
    #      id: meta
    #      uses: docker/metadata-action@v5
    #      with:
    #        images: ${{ inputs.registry }}/${{ inputs.image-name }}
    #        github-token: ${{ inputs.github-token }}
    #        tags:
    #        sep-tags: ','

    - name: Build bootJar
      uses: ./.github/actions/execute-gradle
      with:
        gradle-commands: ':bootJar'

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: 'true'
        tags: |
          ${{ inputs.registry }}/${{ inputs.image-name }}:${{ env.VERSION }}
          ${{ inputs.registry }}/${{ inputs.image-name }}:${{ env.LATEST_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
#        labels: ${{ steps.meta.outputs.labels }}

#    - name: Sign the published Docker image
#      if: ${{ github.event_name != 'pull_request' }}
#      shell: bash
#      env:
#        META_TAGS: ${{ steps.meta.outputs.tags }}
#        DIGEST: ${{ steps.build-and-push.outputs.digest }}
#      run: echo "${{ env.META_TAGS }}" | xargs -I {} cosign sign --yes {}@${{ env.DIGEST }}
